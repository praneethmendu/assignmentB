/**
 * bunq assignment
 * frontend for assignment.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: praneethmendu@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from './encoder';

import { Observable }                                        from 'rxjs';

import { Conversation } from '../../model/conversation';
import { Message } from '../../model/message';
import { Time } from '../../model/time';
import { UserList } from '../../model/user';

import { BASE_PATH, COLLECTION_FORMATS }                     from './variables';
import { Configuration }                                     from './configuration';

@Injectable()
export class ConversationService {

    protected basePath = 'http://assignment.bunq.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * group conversation
     * Create a new group conversation
     * @param userList name and users to add.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addGroupConversaion(userList?: UserList, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addGroupConversaion(userList?: UserList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addGroupConversaion(userList?: UserList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addGroupConversaion(userList?: UserList, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/conversation/group`,
            userList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * personal conversation
     * Create a new personal conversation
     * @param userList The users to add.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPersonalConversaion(userList?: UserList, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addPersonalConversaion(userList?: UserList, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addPersonalConversaion(userList?: UserList, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addPersonalConversaion(userList?: UserList, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/conversation/personal`,
            userList,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get conversation by user ID
     * Array of all conversations for the user.
     * @param userId user ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public conversationByUser(userId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Conversation>>;
    public conversationByUser(userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Conversation>>>;
    public conversationByUser(userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Conversation>>>;
    public conversationByUser(userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling conversationByUser.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Conversation>>(`${this.basePath}/conversation/user/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get conversation
     * Get the conversation details for one conversation.
     * @param conversationId conversation ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConversation(conversationId: number, observe?: 'body', reportProgress?: boolean): Observable<Conversation>;
    public getConversation(conversationId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Conversation>>;
    public getConversation(conversationId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Conversation>>;
    public getConversation(conversationId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getConversation.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Conversation>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get last seen
     * Get the last seen timestamp for the given user
     * @param conversationId conversation ID
     * @param userId last Message ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLastSeen(conversationId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Time>>;
    public getLastSeen(conversationId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Time>>>;
    public getLastSeen(conversationId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Time>>>;
    public getLastSeen(conversationId: number, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getLastSeen.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getLastSeen.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Time>>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}/lastseen/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get new messages
     * Poll all new messages after lastMessageId
     * @param conversationId conversation ID
     * @param lastMessageId last Message ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getNewMessages(conversationId: number, lastMessageId: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Message>>;
    public getNewMessages(conversationId: number, lastMessageId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Message>>>;
    public getNewMessages(conversationId: number, lastMessageId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Message>>>;
    public getNewMessages(conversationId: number, lastMessageId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling getNewMessages.');
        }

        if (lastMessageId === null || lastMessageId === undefined) {
            throw new Error('Required parameter lastMessageId was null or undefined when calling getNewMessages.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Message>>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}/new/${encodeURIComponent(String(lastMessageId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get limited messages
     * Get a limited amount of messages.
     * @param conversationId conversation ID
     * @param limit limit
     * @param offset offset
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public limitedMessages(conversationId: number, limit: number, offset: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Message>>;
    public limitedMessages(conversationId: number, limit: number, offset: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Message>>>;
    public limitedMessages(conversationId: number, limit: number, offset: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Message>>>;
    public limitedMessages(conversationId: number, limit: number, offset: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling limitedMessages.');
        }

        if (limit === null || limit === undefined) {
            throw new Error('Required parameter limit was null or undefined when calling limitedMessages.');
        }

        if (offset === null || offset === undefined) {
            throw new Error('Required parameter offset was null or undefined when calling limitedMessages.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (limit !== undefined && limit !== null) {
            queryParameters = queryParameters.set('limit', <any>limit);
        }
        if (offset !== undefined && offset !== null) {
            queryParameters = queryParameters.set('offset', <any>offset);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Message>>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}/message/limited`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * personal conversation
     * Create a new personal conversation
     * @param conversationId conversation ID
     * @param userId last Message ID
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public putLastSeen(conversationId: number, userId: number, observe?: 'body', reportProgress?: boolean): Observable<Time>;
    public putLastSeen(conversationId: number, userId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Time>>;
    public putLastSeen(conversationId: number, userId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Time>>;
    public putLastSeen(conversationId: number, userId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling putLastSeen.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling putLastSeen.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.put<Time>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}/seen/${encodeURIComponent(String(userId))}`,
            null,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * conversationId
     * send a message
     * @param conversationId conversation ID
     * @param message body message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sendMsg(conversationId: number, message: Message, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public sendMsg(conversationId: number, message: Message, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public sendMsg(conversationId: number, message: Message, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public sendMsg(conversationId: number, message: Message, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (conversationId === null || conversationId === undefined) {
            throw new Error('Required parameter conversationId was null or undefined when calling sendMsg.');
        }

        if (message === null || message === undefined) {
            throw new Error('Required parameter message was null or undefined when calling sendMsg.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/xml',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/conversation/${encodeURIComponent(String(conversationId))}/message/send`,
            message,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
